# Project Status Page: Dynasty

---

## 1. Project Overview

- **Project Name:** Dynasty  
- **Purpose:** A family tree application for iOS that provides a secure platform for family members to connect, share stories, and maintain their legacy.  
- **Key Features:**  
  - Robust user authentication with email/password and Apple Sign In
  - Advanced biometric security with Face ID/Touch ID/Passcode fallback
  - Secure vault with attempt limiting and lockout protection
  - Family tree visualization  
  - Personal history book  
  - Family feed  
  - Encrypted messaging  
- **Current Phase:** Development - Security Implementation & Family Tree  
- **Project Owner/Stakeholders:** Just Me  

---

## 2. Requirements

### Functional Requirements

1. **Family Tree Diagram:**  
   - Interactive canvas, draggable for easy navigation.  
   - Users can add family members (spouse, parents, children).  
   - Family admins can edit the entire tree, while other members can only modify their branch.  
   - Toggle between editing and viewing modes.  
   - Tap on a user's icon to display an information button ("i"), leading to their personal history page.  
   - Editing mode includes add buttons (+) for adding new members and a settings button for editing personal details.  
   - Add Family Member page includes fields: First name, Last name, DOB, Email, Phone number, Gender.  

2. **Vault for Document Storage:** ðŸš§ IN PROGRESS
   - Secure, end-to-end encrypted storage for pictures, documents, and videos
   - Multi-layer authentication with biometrics and passcode fallback
   - Attempt limiting with 5-minute lockout after 5 failed attempts
   - Comprehensive security logging and monitoring
   - Automatic session validation and token refresh
   - Secure document deletion with confirmation
   - Dynamic authentication UI based on device capabilities

3. **User Authentication:** âœ… COMPLETED
   - Firebase Authentication with email/password and Apple Sign In
   - Robust error handling and user feedback
   - Secure Apple Sign In with cryptographic nonce
   - Token revocation and account deletion support
   - Automatic user profile and family tree initialization
   - Face ID/Touch ID support for quick sign-in
   - Email persistence for password-based sign-ins only
   - Proper new user account creation flow
   - Comprehensive logging for debugging and security auditing
   - User-friendly error messages
   - Graceful handling of authentication failures
   - Session validation and token refresh
   - Biometric availability checking

4. **Feed for Family Updates:**  
   - Displays public history book stories.  
   - Users can post RSVPs for events and invite specific family members or the entire family tree.  

---

## 3. Development Outline

- **Current Development Focus:**
  - Implementing secure Firebase Storage integration for vault
  - End-to-end encryption for user files
  - Document/photo/video upload and management
  - Secure file access control
  
- **Technologies Used:**  
  - Swift  
  - Firebase  

- **Libraries/Frameworks:**  
  - Firebase Authentication  
  - Firebase Firestore  
  - Firebase Storage  
  - Firebase Functions  
  - AuthenticationServices (Apple Sign-In)
  - CryptoKit (File Encryption)
  - LocalAuthentication (Biometric Security)
  - os.log (System Logging)

- **Security Features:**
  - Multi-factor authentication âœ…
  - Biometric authentication with fallback âœ…
  - End-to-end file encryption ðŸš§
  - Secure file storage and retrieval ðŸš§
  - User-specific encryption keys ðŸš§
  - File access control ðŸš§

---

## 4. Milestones

1. **Initiation Phase:** Complete âœ…
2. **Authentication Phase:** Complete âœ…
3. **Current Sprint/Phase:** Vault Storage Implementation
   - Implementing Firebase Storage integration
   - Setting up end-to-end encryption for files
   - Creating secure file upload/download system
   - Implementing file access control
4. **Next Phase:** Family Tree Development
   - Interactive canvas implementation
   - Member management functionality
   - Tree visualization
   - Permission system
5. **Future Phases:**
   - Feed system development
   - Beta testing
   - Performance optimization

---

## 5. Progress Tracking

### Tasks Completed âœ…
- Firebase Authentication setup
- Robust Apple Sign In implementation
- Email/password authentication with error handling
- User profile creation with family tree initialization
- History book creation flow
- Token revocation and account deletion functionality
- Database structure in Firestore
- Face ID/Touch ID integration
- Email persistence for password sign-ins
- New user onboarding flow
- Comprehensive error handling
- Security logging system
- Vault access control implementation
- Attempt limiting system
- Session validation
- Token refresh mechanism
- Auto-lock functionality for vault
- SQLite database integrity protection
- Tab-based authentication tracking
- Secure cache management

### Immediate Focus (Vault Storage)
1. Set up Firebase Storage integration
2. Implement end-to-end encryption for files
3. Create secure file upload/download system
4. Implement file access control
5. Add file management UI
6. Test encryption/decryption performance
7. Implement secure file deletion

### Next Focus (Family Tree)
1. Design interactive canvas
2. Implement member management
3. Create tree visualization
4. Set up permission system
5. Add member information display

### Tasks in Progress ðŸš§
- Firebase Storage integration
- End-to-end file encryption system
- File upload/download functionality
- File access control implementation
- Secure file management

### Upcoming Tasks
- Family Tree canvas development
- Member management system
- Tree visualization components
- Permission system implementation

### Security Improvements
- End-to-end file encryption
- Secure file storage and retrieval
- User-specific encryption keys
- File access control

### Issues/Risks Identified
- Ensuring seamless scalability of Firestore database
- Managing user permissions across branches
- Optimizing tree rendering performance
- Handling biometric authentication edge cases
- Managing secure data synchronization
- Handling offline security states
- Managing authentication attempt limits
- Handling device capability variations

### Next Steps (Immediate Focus)
1. Complete vault security implementation
2. Implement Family Tree interactive canvas
3. Develop tree navigation controls
4. Implement permission system
5. Add member information display

### Technical Requirements for Vault Storage

#### Firebase Storage Integration
- Secure file upload/download
- Progress tracking
- Error handling
- Retry mechanisms
- File type validation

#### End-to-End Encryption
- User-specific encryption keys
- Secure key storage
- File encryption/decryption
- Metadata protection
- Secure key rotation

#### File Management
- File organization system
- Thumbnail generation
- File type handling
- Version control
- Deletion management

### Vault Storage Workflow
```plaintext
User authenticated in vault
      â†“
Select file to upload
      â†“
Generate encryption key
      â†“
Encrypt file locally
      â†“
Upload to Firebase Storage
      â†“
Store encrypted metadata
      â†“
Update user's file index
      â†“
Generate secure thumbnail
      â†“
Enable file management
```

### File Access Workflow
```plaintext
Request file access
      â†“
Verify user authentication
      â†“
Retrieve encryption key
      â†“
Download encrypted file
      â†“
Decrypt file locally
      â†“
Display/open file
      â†“
Secure cleanup after use
```

## 6. Next Steps

### Immediate Actions (Vault Storage)
1. Set up Firebase Storage bucket
2. Implement file encryption system
3. Create file upload/download handlers
4. Build file management UI
5. Implement secure file deletion
6. Test encryption performance
7. Add progress indicators

### Following Phase (Family Tree)
1. Design tree canvas layout
2. Create member management system
3. Implement visualization components
4. Set up permission controls
5. Add member data handling

## 7. Goals and Vision

- **Current Priority:** Implementing secure file storage and management in the vault
- **Next Priority:** Developing interactive family tree functionality
- **Long-term Vision:** Creating a comprehensive family history platform with secure document storage and sharing

## 8. Technical Context & Implementation Notes

### Authentication Implementation
- Using Firebase Auth with Apple Sign In as primary authentication
- Biometric authentication implemented with LocalAuthentication framework
- Auto-lock functionality based on tab selection and background state
- SQLite database for secure local storage

### Vault Storage Implementation Notes
- Firebase Storage selected for scalable cloud storage
- Client-side encryption approach:
  - Files encrypted before upload using CryptoKit
  - Unique encryption keys per user
  - Keys never transmitted to server
  - Metadata stored separately from files
- File types supported:
  - Documents (.pdf, .doc, .docx, etc.)
  - Images (.jpg, .png, .heic)
  - Videos (.mp4, .mov)
  - Audio (.mp3, .m4a)

### Security Decisions
- End-to-end encryption for all vault files
- No server-side file processing to maintain security
- Secure key storage in Keychain
- Automatic file cleanup after viewing
- No cloud-based thumbnail generation
- Local thumbnail caching with encryption

### Performance Considerations
- Large file handling with chunked upload
- Background upload support
- Local caching strategy for frequently accessed files
- Thumbnail generation optimizations
- Memory management for large media files

### Future Considerations
- Potential backup key recovery system
- Family sharing capabilities
- Version control for documents
- Collaborative document editing
- Cross-device synchronization
- Offline access capabilities

This section will be updated as new technical decisions and implementation details are finalized.
