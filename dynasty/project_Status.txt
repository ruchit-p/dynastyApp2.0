# Project Status Page: Dynasty

---

## 1. Project Overview

- **Project Name:** Dynasty  
- **Purpose:** A family tree application for iOS that provides a secure platform for family members to connect, share stories, and maintain their legacy.  
- **Key Features:**  
  - Robust user authentication with email/password and Apple Sign In âœ…
  - Advanced biometric security with Face ID/Touch ID/Passcode fallback âœ…
  - Secure vault with attempt limiting and lockout protection âœ…
  - Family tree visualization  
  - Personal history book  
  - Family feed  
  - Encrypted messaging  
- **Current Phase:** Development - Vault Implementation & Family Tree  
- **Project Owner/Stakeholders:** Just Me  

---

## 2. Requirements

### Functional Requirements

1. **Family Tree Diagram:**  
   - Interactive canvas, draggable for easy navigation.  
   - Users can add family members (spouse, parents, children).  
   - Family admins can edit the entire tree, while other members can only modify their branch.  
   - Toggle between editing and viewing modes.  
   - Tap on a user's icon to display an information button ("i"), leading to their personal history page.  
   - Editing mode includes add buttons (+) for adding new members and a settings button for editing personal details.  
   - Add Family Member page includes fields: First name, Last name, DOB, Email, Phone number, Gender.  

2. **Vault for Document Storage:** ðŸš§ IN PROGRESS
   - Secure, end-to-end encrypted storage for pictures, documents, and videos âœ…
   - Multi-layer authentication with biometrics and passcode fallback âœ…
   - Attempt limiting with 5-minute lockout after 5 failed attempts âœ…
   - Comprehensive security logging and monitoring âœ…
   - Automatic session validation and token refresh âœ…
   - Secure document deletion with confirmation âœ…
   - Dynamic authentication UI based on device capabilities âœ…
   - Thumbnail generation and caching for files âœ…
   - Progress tracking for large file uploads/downloads âœ…
   - File type validation and preview functionality âœ…
   - Secure file sharing functionality ðŸš§

3. **User Authentication:** âœ… COMPLETED
   - Firebase Authentication with email/password and Apple Sign In
   - Robust error handling and user feedback
   - Secure Apple Sign In with cryptographic nonce
   - Token revocation and account deletion support
   - Automatic user profile and family tree initialization
   - Face ID/Touch ID support for quick sign-in
   - Email persistence for password-based sign-ins only
   - Proper new user account creation flow
   - Comprehensive logging for debugging and security auditing
   - User-friendly error messages
   - Graceful handling of authentication failures
   - Session validation and token refresh
   - Biometric availability checking

4. **Feed for Family Updates:**  
   - Displays public history book stories.  
   - Users can post RSVPs for events and invite specific family members or the entire family tree.  

---

## 3. Development Outline

- **Current Development Focus:**
  - Implementing secure file sharing in vault
  - Finalizing vault UI components
  - Testing vault security features
  - Preparing for family tree implementation
  
- **Technologies Used:**  
  - Swift  
  - Firebase  

- **Libraries/Frameworks:**  
  - Firebase Authentication  
  - Firebase Firestore  
  - Firebase Storage  
  - Firebase Functions  
  - AuthenticationServices (Apple Sign-In)
  - CryptoKit (File Encryption)
  - LocalAuthentication (Biometric Security)
  - os.log (System Logging)
  - QuickLook (File Preview)
  - AVKit (Audio/Video Playback)

- **Security Features:**
  - Multi-factor authentication âœ…
  - Biometric authentication with fallback âœ…
  - End-to-end file encryption âœ…
  - Secure file storage and retrieval âœ…
  - User-specific encryption keys âœ…
  - File access control âœ…
  - Secure key storage in Keychain âœ…
  - File integrity verification âœ…

---

## 4. Milestones

1. **Initiation Phase:** Complete âœ…
2. **Authentication Phase:** Complete âœ…
3. **Current Sprint/Phase:** Vault Implementation
   - Core vault functionality complete âœ…
   - End-to-end encryption implemented âœ…
   - File upload/download system complete âœ…
   - File access control implemented âœ…
   - Thumbnail generation and caching complete âœ…
   - File preview functionality complete âœ…
   - Remaining: File sharing functionality ðŸš§
4. **Next Phase:** Family Tree Development
   - Interactive canvas implementation
   - Member management functionality
   - Tree visualization
   - Permission system
5. **Future Phases:**
   - Feed system development
   - Beta testing
   - Performance optimization

---

## 5. Progress Tracking

### Tasks Completed âœ…
- Firebase Authentication setup
- Robust Apple Sign In implementation
- Email/password authentication with error handling
- User profile creation with family tree initialization
- History book creation flow
- Token revocation and account deletion functionality
- Database structure in Firestore
- Face ID/Touch ID integration
- Email persistence for password sign-ins
- New user onboarding flow
- Comprehensive error handling
- Security logging system
- Vault access control implementation
- Attempt limiting system
- Session validation
- Token refresh mechanism
- Auto-lock functionality for vault
- SQLite database integrity protection
- Tab-based authentication tracking
- Secure cache management
- End-to-end file encryption
- Secure file upload/download
- File integrity verification
- Thumbnail generation and caching
- File preview functionality
- Progress tracking for file operations

### Immediate Focus (Vault Completion)
1. Implement file sharing functionality
2. Add sharing permissions management
3. Implement shared file access control
4. Add file version history
5. Implement file recovery system
6. Add batch operations support
7. Optimize large file handling

### Next Focus (Family Tree)
1. Design interactive canvas
2. Implement member management
3. Create tree visualization
4. Set up permission system
5. Add member information display

### Tasks in Progress ðŸš§
- File sharing functionality
- Sharing permissions system
- File version history
- File recovery system

### Upcoming Tasks
- Family Tree canvas development
- Member management system
- Tree visualization components
- Permission system implementation

### Security Improvements
- Implement secure file sharing
- Add file version control
- Enhance file recovery security
- Implement sharing permissions

### Issues/Risks Identified
- Ensuring seamless scalability of Firestore database
- Managing user permissions across branches
- Optimizing tree rendering performance
- Handling biometric authentication edge cases
- Managing secure data synchronization
- Handling offline security states
- Managing authentication attempt limits
- Handling device capability variations
- Large file upload/download optimization
- Secure file sharing implementation

### Next Steps (Immediate Focus)
1. Complete file sharing functionality
2. Implement sharing permissions
3. Add file version history
4. Create file recovery system
5. Optimize large file handling

### Technical Requirements for File Sharing

#### Sharing System
- Secure link generation
- Access control management
- Permission levels
- Expiration settings
- Revocation capability

#### Version Control
- File versioning
- Change tracking
- Rollback capability
- Version comparison

#### Recovery System
- Soft delete implementation
- Recovery window
- Permanent deletion
- Batch recovery

### File Sharing Workflow
```plaintext
User selects file to share
      â†“
Configure sharing settings
      â†“
Generate secure share link
      â†“
Set permissions and expiry
      â†“
Send share invitation
      â†“
Track access and changes
      â†“
Manage shared access
      â†“
Enable revocation
```

## 6. Next Steps

### Immediate Actions (File Sharing)
1. Design sharing UI
2. Implement share link generation
3. Create permissions system
4. Add version control
5. Implement recovery system
6. Add batch operations
7. Test security measures

### Following Phase (Family Tree)
1. Design tree canvas layout
2. Create member management system
3. Implement visualization components
4. Set up permission controls
5. Add member data handling

## 7. Goals and Vision

- **Current Priority:** Completing vault functionality with secure file sharing
- **Next Priority:** Developing interactive family tree functionality
- **Long-term Vision:** Creating a comprehensive family history platform with secure document storage and sharing

## 8. Technical Context & Implementation Notes

### Vault Implementation
- End-to-end encryption using CryptoKit âœ…
- Secure key storage in Keychain âœ…
- File integrity verification with SHA-256 âœ…
- Thumbnail generation and caching âœ…
- Progress tracking for file operations âœ…
- File preview support for multiple formats âœ…

### Security Decisions
- End-to-end encryption for all files âœ…
- No server-side file processing âœ…
- Secure key storage in Keychain âœ…
- Automatic file cleanup after viewing âœ…
- Local thumbnail generation âœ…
- Secure file deletion âœ…

### Performance Considerations
- Large file handling with chunked upload
- Background upload support
- Local caching strategy
- Thumbnail generation optimizations
- Memory management for large files

### Future Considerations
- Backup key recovery system
- Family sharing capabilities
- Version control for documents
- Collaborative document editing
- Cross-device synchronization
- Offline access capabilities

This section will be updated as new technical decisions and implementation details are finalized.
