Here is the entire Project Status Page: Dynasty in Markdown format:

# Project Status Page: Dynasty

---

## 1. Project Overview

- **Project Name:** Dynasty  
- **Purpose:** A family tree application for iOS that provides a secure platform for family members to connect, share stories, and maintain their legacy.  
- **Key Features:**  
  - Robust user authentication with email/password and Apple Sign In
  - Advanced biometric security with Face ID/Touch ID/Passcode fallback
  - Secure vault with attempt limiting and lockout protection
  - Family tree visualization  
  - Personal history book  
  - Family feed  
  - Encrypted messaging  
- **Current Phase:** Development - Security Implementation & Family Tree  
- **Project Owner/Stakeholders:** Just Me  

---

## 2. Requirements

### Functional Requirements

1. **Family Tree Diagram:**  
   - Interactive canvas, draggable for easy navigation.  
   - Users can add family members (spouse, parents, children).  
   - Family admins can edit the entire tree, while other members can only modify their branch.  
   - Toggle between editing and viewing modes.  
   - Tap on a user's icon to display an information button ("i"), leading to their personal history page.  
   - Editing mode includes add buttons (+) for adding new members and a settings button for editing personal details.  
   - Add Family Member page includes fields: First name, Last name, DOB, Email, Phone number, Gender.  

2. **Vault for Document Storage:** ðŸš§ IN PROGRESS
   - Secure, end-to-end encrypted storage for pictures, documents, and videos
   - Multi-layer authentication with biometrics and passcode fallback
   - Attempt limiting with 5-minute lockout after 5 failed attempts
   - Comprehensive security logging and monitoring
   - Automatic session validation and token refresh
   - Secure document deletion with confirmation
   - Dynamic authentication UI based on device capabilities

3. **User Authentication:** âœ… COMPLETED
   - Firebase Authentication with email/password and Apple Sign In
   - Robust error handling and user feedback
   - Secure Apple Sign In with cryptographic nonce
   - Token revocation and account deletion support
   - Automatic user profile and family tree initialization
   - Face ID/Touch ID support for quick sign-in
   - Email persistence for password-based sign-ins only
   - Proper new user account creation flow
   - Comprehensive logging for debugging and security auditing
   - User-friendly error messages
   - Graceful handling of authentication failures
   - Session validation and token refresh
   - Biometric availability checking

4. **Feed for Family Updates:**  
   - Displays public history book stories.  
   - Users can post RSVPs for events and invite specific family members or the entire family tree.  

---

## 3. Development Outline

- **Technologies Used:**  
  - Swift  
  - Firebase  

- **Libraries/Frameworks:**  
  - Firebase Authentication  
  - Firebase Firestore  
  - Firebase Storage  
  - Firebase Functions  
  - AuthenticationServices (Apple Sign-In)
  - CryptoKit (Secure Authentication)
  - LocalAuthentication (Biometric Security)
  - os.log (System Logging)

- **Security Features:**
  - Multi-factor authentication
  - Biometric authentication with fallback
  - Attempt limiting and lockout
  - Session management
  - Token refresh
  - Comprehensive error handling
  - Security state logging
  - User session validation
  - Secure credential storage
  - Cryptographic nonce generation

- **Infrastructure:**  
  - Firebase for backend services and hosting  

---

## 4. Milestones

1. **Initiation Phase:** Complete âœ…
2. **Authentication Phase:** Complete âœ…
   - Basic email/password authentication
   - Apple Sign In integration with full name handling
   - Biometric authentication integration
   - Comprehensive error handling
   - Security logging implementation
   - User profile creation
   - Family tree initialization
3. **Current Sprint/Phase:** Security Implementation & Family Tree
   - Implementing secure vault access
   - Setting up biometric authentication with fallback
   - Implementing attempt limiting
   - Developing family tree visualization
4. **Next Milestones:**  
   - Complete vault security implementation
   - Implement interactive Family Tree canvas
   - Add member management functionality
   - Develop Feed system
   - Launch beta testing

---

## 5. Progress Tracking

### Tasks Completed âœ…
- Firebase Authentication setup
- Robust Apple Sign In implementation
- Email/password authentication with error handling
- User profile creation with family tree initialization
- History book creation flow
- Token revocation and account deletion functionality
- Database structure in Firestore
- Face ID/Touch ID integration
- Email persistence for password sign-ins
- New user onboarding flow
- Comprehensive error handling
- Security logging system
- Vault access control implementation
- Attempt limiting system
- Session validation
- Token refresh mechanism

### Tasks in Progress ðŸš§
- Vault security features refinement
- Family Tree Diagram interactive canvas
- Member addition and editing functionality
- Permission system implementation
- Tree visualization components

### Security Improvements Made ðŸ”’
- Added biometric authentication with passcode fallback
- Implemented comprehensive error handling
- Added detailed security logging
- Enhanced user feedback for authentication issues
- Improved credential validation
- Added session management
- Implemented secure state handling
- Added attempt limiting and lockout
- Added token refresh mechanism
- Added biometric availability checking

### Issues/Risks Identified
- Ensuring seamless scalability of Firestore database
- Managing user permissions across branches
- Optimizing tree rendering performance
- Handling biometric authentication edge cases
- Managing secure data synchronization
- Handling offline security states
- Managing authentication attempt limits
- Handling device capability variations

### Next Steps (Immediate Focus)
1. Complete vault security implementation
2. Implement Family Tree interactive canvas
3. Develop tree navigation controls
4. Implement permission system
5. Add member information display

---

## 6. Visual Workflows

### Authentication Workflow (Implemented âœ…)
```plaintext
User opens app
      â†“
Choose Sign In Method
      â†“
Email/Password or Apple Sign In
      â†“
Validate Credentials
      â†“
Handle Authentication Response
      â†“
If new user â†’ Create Profile
      â†“
Initialize Family Tree & History Book
      â†“
Prompt for Face ID Setup
      â†“
Main App Interface
```

### Vault Access Workflow (Enhanced ðŸ”’)
```plaintext
User attempts to access vault
      â†“
Check Biometric Availability
      â†“
Attempt Biometric Authentication
      â†“
If Failed â†’ Fallback to Passcode
      â†“
Track Authentication Attempts
      â†“
If Too Many Failures â†’ Lockout
      â†“
If Successful â†’ Show Vault Content
      â†“
Monitor Session State
      â†“
Refresh Token as Needed
```

### Family Tree Diagram Workflow (Current Focus)
```plaintext
User views Family Tree (View Mode)
      â†“
Switch to Edit Mode (if permitted)
      â†“
Add Family Member (Open Form)
      â†“
Submit Form (Save to Firestore)
      â†“
Tree Updates Dynamically
      â†“
View Member Details (Info Page)
      â†“
Show History Book Entries
```

### Feed Functionality Workflow (Upcoming)
```plaintext
Fetch Posts from Firestore
      â†“
Render Posts in Feed
      â†“
Open 'New Post' Form
      â†“
Submit Post (Save to Firestore)
      â†“
Open RSVP (Select Invitees)
      â†“
Save RSVP Status to Firestore
```

## 7. Goals and Vision

- **End Goal:** To create a close-knit social media platform for family members to securely share their stories with their loved ones.
- **Current Priority:** Implementing robust security features while maintaining excellent user experience.
- **Security Focus:** Ensuring user data protection through multi-layer authentication and secure storage.
